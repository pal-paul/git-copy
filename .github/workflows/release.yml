name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.24]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests
        run: |
          go test -v ./test/...
          go test -v -race ./test/...

      - name: Build application
        run: go build -o git-copy ./cmd

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: Get tag version
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build release binaries
        run: |
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -o git-copy-linux-amd64 ./cmd
          GOOS=linux GOARCH=arm64 go build -o git-copy-linux-arm64 ./cmd
          GOOS=darwin GOARCH=amd64 go build -o git-copy-darwin-amd64 ./cmd
          GOOS=darwin GOARCH=arm64 go build -o git-copy-darwin-arm64 ./cmd
          GOOS=windows GOARCH=amd64 go build -o git-copy-windows-amd64.exe ./cmd

          # Create checksums
          sha256sum git-copy-* > checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "## What's Changed" > changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "First release of git-copy GitHub Action" >> changelog.md
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          release_name: Release ${{ steps.tag.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.version, '-') }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-major-tag:
    name: Update Major Version Tag
    runs-on: ubuntu-latest
    needs: release
    if: "!contains(github.ref, '-')" # Only for stable releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update major version tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          MAJOR_TAG=$(echo $TAG | cut -d. -f1)

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Delete existing major tag if it exists
          git tag -d $MAJOR_TAG 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_TAG 2>/dev/null || true

          # Create new major tag pointing to current commit
          git tag $MAJOR_TAG
          git push origin $MAJOR_TAG

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker]
    if: always()

    steps:
      - name: Get tag version
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        if: needs.release.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "✅ Release ${{ steps.tag.outputs.version }} completed successfully!"
          echo "📦 Binaries and Docker images have been published"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.version }}"

      - name: Notify failure
        if: needs.release.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "❌ Release ${{ steps.tag.outputs.version }} failed!"
          echo "Please check the workflow logs for details"
          exit 1
